import React, { createContext, useState, useEffect } from 'react';
import { BrowserRouter as RouterProvider, createBrowserRouter } from 'react-router-dom';
import Home from './pages/Home';
import Register from './pages/Register';
import Login from './pages/Login';
import { ToastContainer } from 'react-toastify';
import "react-toastify/dist/ReactToastify.css";
import axios from 'axios';
import Dashboard from './pages/Dashboard';
import Contacts from './components/Contacts';
import AddContact from './components/AddContact';
import SendMessage from './components/SendMessage';
import EditContact from './components/EditContact';
import LogOut from './components/LogOut';
import ProtectedRoutes from './components/ProtectedRoutes';
import NotFound from './pages/NotFound';

export const UserContext = createContext(null);

const router = createBrowserRouter([
  {
    path: '/',
    element: <Home />,
  },
  {
    path: '/register',
    element: <Register />,
  },
  {
    path: '/login',
    element: <Login />,
  },
  {
    path: '/dashboard',
    element: <ProtectedRoutes><Dashboard/></ProtectedRoutes>,
    children: [
      {
        index: true,
        element: <Contacts/>,
      },
      {
        path: 'add-contact',
        element: <AddContact/>,
      },
      {
        path: 'send-message',
        element: <SendMessage/>,
      },
      {
        path: 'edit-contact',
        element: <EditContact/>,
      }
    ]
  },
  {
    path: '/dashboard/logout',
    element: <LogOut/>,
  },
  {
    path: "*",
    element: <NotFound/>,
  }
]);

const App = () => {
  const [user, setUser] = useState();

  // Check if user is logged in
  useEffect(() => {
    axios.get('http://localhost:3000/aunalertsystem/verify', {
      headers: {
        Authorization: `Bearer ${localStorage.getItem('token')}`
      }
    })
    .then(res => {
      if (res.data.user) {
        setUser(res.data.user);
      }
    })
    .catch(err => {
      console.log(err);
    });
  }, []);

  return (
    <>
      <ToastContainer />
      <UserContext.Provider value={{user, setUser}}>
        <RouterProvider router={router} />
      </UserContext.Provider>
    </>
  )
}

export default App;
